{"version":3,"sources":["../app.js"],"names":["express","require","app","bodyParser","methodOverride","expressSanitizer","mongoose","passport","LocalStrategy","session","MongoStore","User","port","process","env","PORT","config","commentRoutes","blogRoutes","indexRoutes","Promise","global","connect","DB_URI","useMongoClient","use","urlencoded","extended","set","static","__dirname","secret","SECRET","resave","saveUninitialized","store","mongooseConnection","connection","cookie","maxAge","initialize","authenticate","serializeUser","deserializeUser","req","res","next","locals","currentUser","user","status","render","listen","console","log","IP"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AAAA,IACEC,MAAMF,SADR;AAAA,IAEEG,aAAaF,QAAQ,aAAR,CAFf;AAAA,IAGEG,iBAAiBH,QAAQ,iBAAR,CAHnB;AAAA,IAIEI,mBAAmBJ,QAAQ,mBAAR,CAJrB;AAAA,IAKEK,WAAWL,QAAQ,UAAR,CALb;AAAA,IAMEM,WAAWN,QAAQ,UAAR,CANb;AAAA,IAOEO,gBAAgBP,QAAQ,gBAAR,CAPlB;AAAA,IAQEQ,UAAUR,QAAQ,iBAAR,CARZ;AAAA,IASES,aAAaT,QAAQ,eAAR,EAAyBQ,OAAzB,CATf;AAAA,IAUEE,OAAOV,QAAQ,eAAR,CAVT;AAAA,IAWEW,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAX7B;;AAaAd,QAAQ,QAAR,EAAkBe,MAAlB;;AAEA,IAAMC,gBAAgBhB,QAAQ,mBAAR,CAAtB;AACA,IAAMiB,aAAajB,QAAQ,gBAAR,CAAnB;AACA,IAAMkB,cAAclB,QAAQ,gBAAR,CAApB;;AAEAK,SAASc,OAAT,GAAmBC,OAAOD,OAA1B;AACAd,SAASgB,OAAT,CAAiBT,QAAQC,GAAR,CAAYS,MAA7B,EAAqC,EAACC,gBAAgB,IAAjB,EAArC;AACAtB,IAAIuB,GAAJ,CAAQtB,WAAWuB,UAAX,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAR;AACAzB,IAAIuB,GAAJ,CAAQpB,kBAAR;AACAH,IAAIuB,GAAJ,CAAQrB,eAAe,SAAf,CAAR;AACAF,IAAI0B,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACA1B,IAAIuB,GAAJ,CAAQzB,QAAQ6B,MAAR,CAAeC,YAAY,SAA3B,CAAR;;AAEA;AACA5B,IAAIuB,GAAJ,CAAQhB,QAAQ;AACdsB,UAAQlB,QAAQC,GAAR,CAAYkB,MADN;AAEdC,UAAQ,KAFM;AAGdC,qBAAmB,KAHL;AAIdC,SAAO,IAAIzB,UAAJ,CAAe,EAAC0B,oBAAoB9B,SAAS+B,UAA9B,EAAf,CAJO;AAKdC,UAAQ,EAACC,QAAQ,MAAM,EAAN,GAAW,IAApB,CAA0B;AAA1B,GALM,EAAR,CAAR;AAOArC,IAAIuB,GAAJ,CAAQlB,SAASiC,UAAT,EAAR;AACAtC,IAAIuB,GAAJ,CAAQlB,SAASE,OAAT,EAAR;AACAF,SAASkB,GAAT,CAAa,IAAIjB,aAAJ,CAAkBG,KAAK8B,YAAL,EAAlB,CAAb;AACAlC,SAASmC,aAAT,CAAuB/B,KAAK+B,aAAL,EAAvB;AACAnC,SAASoC,eAAT,CAAyBhC,KAAKgC,eAAL,EAAzB;;AAEA;AACA;AACAzC,IAAIuB,GAAJ,CAAQ,UAACmB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1BD,MAAIE,MAAJ,CAAWC,WAAX,GAAyBJ,IAAIK,IAA7B;AACAH;AACD,CAHD;;AAKA5C,IAAIuB,GAAJ,CAAQN,WAAR;AACAjB,IAAIuB,GAAJ,CAAQ,qBAAR,EAA+BR,aAA/B;AACAf,IAAIuB,GAAJ,CAAQ,QAAR,EAAkBP,UAAlB;;AAEA;AACAhB,IAAIuB,GAAJ,CAAQ,UAAUmB,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAChCD,MAAIK,MAAJ,CAAW,GAAX;AACAL,MAAIM,MAAJ,CAAW,KAAX;AACA;AACD,CAJD;;AAMAjD,IAAIkD,MAAJ,CAAWxC,IAAX,EAAiB,YAAM;AACrByC,UAAQC,GAAR,6BAAsCC,EAAtC,SAA4C3C,IAA5C;AACD,CAFD","file":"app.js","sourcesContent":["const express = require(\"express\"),\n  app = express(),\n  bodyParser = require(\"body-parser\"),\n  methodOverride = require(\"method-override\"),\n  expressSanitizer = require(\"express-sanitizer\"),\n  mongoose = require(\"mongoose\"),\n  passport = require(\"passport\"),\n  LocalStrategy = require(\"passport-local\"),\n  session = require(\"express-session\"),\n  MongoStore = require(\"connect-mongo\")(session),\n  User = require(\"./models/user\"),\n  port = process.env.PORT || 3000;\n\nrequire('dotenv').config();\n\nconst commentRoutes = require(\"./routes/comments\");\nconst blogRoutes = require(\"./routes/blogs\");\nconst indexRoutes = require(\"./routes/index\");\n\nmongoose.Promise = global.Promise;\nmongoose.connect(process.env.DB_URI, {useMongoClient: true});\napp.use(bodyParser.urlencoded({extended: true}));\napp.use(expressSanitizer());\napp.use(methodOverride(\"_method\"));\napp.set(\"view engine\", \"ejs\");\napp.use(express.static(__dirname + \"/public\"));\n\n// PASSPORT CONFIGURATION\napp.use(session({\n  secret: process.env.SECRET,\n  resave: false,\n  saveUninitialized: false,\n  store: new MongoStore({mongooseConnection: mongoose.connection}),\n  cookie: {maxAge: 180 * 60 * 1000} // Timeout 180 mins\n}));\napp.use(passport.initialize());\napp.use(passport.session());\npassport.use(new LocalStrategy(User.authenticate()));\npassport.serializeUser(User.serializeUser());\npassport.deserializeUser(User.deserializeUser());\n\n// this middleware provides in every route req.user\n// AND in every view currentUser\napp.use((req, res, next) => {\n  res.locals.currentUser = req.user;\n  next();\n});\n\napp.use(indexRoutes);\napp.use(\"/blogs/:id/comments\", commentRoutes);\napp.use(\"/blogs\", blogRoutes);\n\n// Handle 404 - Keep this as a last route\napp.use(function (req, res, next) {\n  res.status(400);\n  res.render(\"404\");\n  //res.send('404: File Not Found');\n});\n\napp.listen(port, () => {\n  console.log(`Server started at port ${IP}:${port}`)\n});"]}