{"version":3,"sources":["../../routes/index.js"],"names":["express","require","router","Router","passport","User","get","req","res","render","currentUser","user","post","newUser","username","body","email","find","emailExists","length","admin","process","env","DB_ADMIN","register","password","err","authenticate","redirect","console","log","successRedirect","failureRedirect","logout","module","exports"],"mappings":";;;;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,SAASF,QAAQG,MAAR,EAAf;AACA,IAAMC,WAAWH,QAAQ,UAAR,CAAjB;AACA,IAAMI,OAAOJ,QAAQ,gBAAR,CAAb;;AAEA;AACAC,OAAOI,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5BA,MAAIC,MAAJ,CAAW,SAAX,EAAsB,EAACC,aAAaH,IAAII,IAAlB,EAAtB;AACD,CAFD;;AAIA;AACA;AACAT,OAAOI,GAAP,CAAW,WAAX,EAAwB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACpCA,MAAIC,MAAJ,CAAW,UAAX;AACD,CAFD;;AAIA;AACAP,OAAOU,IAAP,CAAY,WAAZ;AAAA,qEAAyB,iBAAOL,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfK,mBAFe,GAEL,IAAIR,IAAJ,CAAS,EAACS,UAAUP,IAAIQ,IAAJ,CAASD,QAApB,EAA8BE,OAAOT,IAAIQ,IAAJ,CAASC,KAA9C,EAAT,CAFK;AAGrB;;AAHqB;AAAA,mBAIKX,KAAKY,IAAL,CAAU,EAACD,OAAOT,IAAIQ,IAAJ,CAASC,KAAjB,EAAV,CAJL;;AAAA;AAIfE,uBAJe;;AAAA,kBAKjBA,YAAYC,MAAZ,GAAqB,CALJ;AAAA;AAAA;AAAA;;AAAA,kBAMVZ,IAAIQ,IAAJ,CAASC,KANC;;AAAA;AAQrB;AACAH,oBAAQO,KAAR,GAAgBb,IAAIQ,IAAJ,CAASC,KAAT,KAAmBK,QAAQC,GAAR,CAAYC,QAA/C;;AATqB;AAAA,mBAWflB,KAAKmB,QAAL,CAAcX,OAAd,EAAuBN,IAAIQ,IAAJ,CAASU,QAAhC,EAA0C,UAACC,GAAD,EAAMf,IAAN,EAAe;AAC7D,kBAAIe,GAAJ,EAAS;AACP,sBAAMA,GAAN;AACD;AACDtB,uBAASuB,YAAT,CAAsB,OAAtB,EAA+BpB,GAA/B,EAAmCC,GAAnC,EAAwC,YAAM;AAC5CA,oBAAIoB,QAAJ,CAAa,QAAb;AACD,eAFD;AAGD,aAPK,CAXe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAoBrBC,oBAAQC,GAAR;AApBqB,6CAqBdtB,IAAIC,MAAJ,CAAW,UAAX,CArBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;;AA0BA;AACAP,OAAOI,GAAP,CAAW,QAAX,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAa;AAChCA,MAAIC,MAAJ,CAAW,OAAX;AACD,CAFD;;AAIA;AACAP,OAAOU,IAAP,CAAY,QAAZ,EAAsBR,SAASuB,YAAT,CAAsB,OAAtB,EAA8B;AAClDI,mBAAiB,QADiC;AAElDC,mBAAiB;AAFiC,CAA9B,CAAtB;;AAKA;AACA9B,OAAOI,GAAP,CAAW,SAAX,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClCD,MAAI0B,MAAJ;AACAzB,MAAIoB,QAAJ,CAAa,QAAb;AACD,CAHD;;AAKAM,OAAOC,OAAP,GAAiBjC,MAAjB","file":"index.js","sourcesContent":["const express = require(\"express\");\nconst router = express.Router();\nconst passport = require(\"passport\");\nconst User = require(\"../models/user\");\n\n// ROOT ROUTE\nrouter.get(\"/\", (req, res) => {\n  res.render(\"landing\", {currentUser: req.user});\n});\n\n//  AUTH ROUTES\n// show the register form\nrouter.get(\"/register\", (req, res) => {\n  res.render(\"register\");\n});\n\n// handle signup logic\nrouter.post(\"/register\", async (req, res) => {\n  try {\n    const newUser = new User({username: req.body.username, email: req.body.email});\n    // check if email already exists\n    const emailExists = await User.find({email: req.body.email});\n    if (emailExists.length > 0) {\n      throw `${req.body.email} is already in the database.`;\n    }\n    // authenticate as admin, when registering with email from .env file\n    newUser.admin = req.body.email === process.env.DB_ADMIN;\n\n    await User.register(newUser, req.body.password, (err, user) => {\n      if (err) {\n        throw err;\n      }\n      passport.authenticate(\"local\")(req,res, () => {\n        res.redirect(\"/blogs\");\n      });\n    });\n  } catch (err) {\n    console.log(err);\n    return res.render(\"register\");\n  }\n\n});\n\n// render login form\nrouter.get(\"/login\", (req, res)=> {\n  res.render(\"login\");\n});\n\n// handle login logic\nrouter.post(\"/login\", passport.authenticate(\"local\",{\n  successRedirect: \"/blogs\",\n  failureRedirect: \"/login\"\n}));\n\n// logout route\nrouter.get(\"/logout\", (req, res) => {\n  req.logout();\n  res.redirect(\"/blogs\");\n});\n\nmodule.exports = router;"]}